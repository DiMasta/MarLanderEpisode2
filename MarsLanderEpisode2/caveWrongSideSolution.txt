#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

int out[] = {
1, 1,
2, 2,
5, 3,
11, 4,
15, 4,
15, 4,
9, 4,
7, 4,
9, 4,
15, 4,
15, 4,
21, 4,
18, 4,
13, 4,
11, 4,
11, 4,
15, 4,
16, 4,
18, 4,
17, 4,
19, 4,
17, 4,
15, 4,
15, 4,
9, 4,
8, 4,
6, 4,
9, 4,
10, 4,
12, 4,
9, 4,
11, 4,
11, 4,
11, 4,
7, 4,
3, 4,
4, 4,
5, 4,
4, 4,
4, 4,
3, 4,
2, 4,
4, 4,
9, 4,
11, 4,
8, 4,
10, 4,
5, 4,
5, 4,
10, 4,
8, 4,
9, 4,
11, 4,
13, 4,
12, 4,
8, 4,
12, 4,
13, 4,
12, 4,
9, 4,
5, 4,
4, 4,
4, 4,
1, 4,
1, 4,
0, 4,
1, 4,
1, 4,
0, 4,
-7, 4,
-10, 4,
-10, 4,
-9, 4,
-14, 4,
-11, 4,
-9, 4,
-14, 3,
-10, 3,
-10, 3,
-10, 3,
-12, 3,
-12, 4,
-12, 3,
-16, 3,
-17, 4,
-23, 3,
-20, 2,
-19, 2,
-20, 2,
-24, 3,
-20, 4,
-22, 4,
-26, 3,
-24, 3,
-23, 3,
-23, 3,
-21, 2,
-23, 2,
-18, 2,
-22, 2,
-15, 2,
-15, 2,
-13, 2,
-13, 2,
-12, 3,
-14, 3,
-14, 3,
-13, 3,
-14, 3,
-10, 3,
-12, 3,
-12, 3,
-11, 4,
-11, 4,
-11, 4,
-10, 4,
-11, 4,
-6, 3,
0, 3,
-1, 3,
-3, 3,
-10, 4,
-12, 4,
-16, 4,
-13, 4,
-10, 4,
-10, 3,
-6, 3,
-8, 2,
-8, 1,
-8, 1,
-8, 2,
-8, 3,
-10, 3,
-13, 3,
-16, 3,
-15, 4,
-14, 4,
-17, 4,
-18, 3,
-18, 3,
-15, 3,
-13, 4,
-12, 4,
-12, 4,
-10, 4,
-8, 4,
-7, 4,
-10, 4,
-14, 4,
-9, 4,
-7, 4,
-7, 4,
-9, 4,
-7, 4,
-5, 4,
-6, 4,
0, 4,
2, 3,
-3, 3,
0, 4,
0, 4,
0, 4,
0, 4,
0, 0,
0, 0,
0, 0,
0, 0,
0, 0,
0, 0
};

int main() {
    int surfaceN; // the number of points used to draw the surface of Mars.
    cin >> surfaceN; cin.ignore();
    cerr << surfaceN << endl;
    
    for (int i = 0; i < surfaceN; i++) {
        int landX; // X coordinate of a surface point. (0 to 6999)
        int landY; // Y coordinate of a surface point. By linking all the points together in a sequential fashion, you form the surface of Mars.
        cin >> landX >> landY; cin.ignore();
        cerr << " " << landX << " " << landY << endl;
    }

    int turn = 0;

    // game loop
    while (1) {
        int X;
        int Y;
        int hSpeed; // the horizontal speed (in m/s), can be negative.
        int vSpeed; // the vertical speed (in m/s), can be negative.
        int fuel; // the quantity of remaining fuel in liters.
        int rotate; // the rotation angle in degrees (-90 to 90).
        int power; // the thrust power (0 to 4).
        cin >> X >> Y >> hSpeed >> vSpeed >> fuel >> rotate >> power; cin.ignore();
    
        cerr << X << " " << Y << " " << hSpeed << " " << vSpeed << " " << fuel << " " << rotate << " " << power << endl;
        
		cout << out[turn] << " " << out[turn + 1] << endl;
        
        turn += 2;
    }
}